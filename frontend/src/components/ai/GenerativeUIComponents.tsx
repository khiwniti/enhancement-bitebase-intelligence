/**
 * Generative UI Components for CopilotKit
 * Beautiful, interactive components that are generated by AI actions
 */

"use client";

import React, { useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import {
  TrendingUp,
  TrendingDown,
  DollarSign,
  Users,
  ShoppingCart,
  Calendar,
  MapPin,
  Star,
  AlertTriangle,
  CheckCircle,
  Download,
  Eye,
  BarChart3,
  PieChart,
  Activity,
  Target,
  Zap,
  Lightbulb,
} from "lucide-react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";

// Revenue Analysis Card Component
export const RevenueAnalysisCard: React.FC<{
  data: any;
  insights: string[];
  timeframe: string;
}> = ({ data, insights, timeframe }) => {
  const [selectedView, setSelectedView] = useState<"chart" | "breakdown">("chart");

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
      className="w-full max-w-4xl"
    >
      <Card className="overflow-hidden border-0 shadow-xl bg-gradient-to-br from-blue-50 to-indigo-100">
        <CardHeader className="bg-gradient-to-r from-blue-600 to-indigo-600 text-white">
          <div className="flex justify-between items-center">
            <div>
              <CardTitle className="text-xl font-bold flex items-center gap-2">
                <BarChart3 className="w-6 h-6" />
                Revenue Analysis
              </CardTitle>
              <p className="text-blue-100 mt-1">Analysis for {timeframe}</p>
            </div>
            <Badge variant="secondary" className="bg-white/20 text-white border-0">
              <Activity className="w-4 h-4 mr-1" />
              Live Data
            </Badge>
          </div>
        </CardHeader>

        <CardContent className="p-6">
          {/* Key Metrics */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
            <motion.div
              className="bg-white rounded-lg p-4 shadow-sm border border-gray-100"
              whileHover={{ scale: 1.02 }}
              transition={{ type: "spring", stiffness: 300 }}
            >
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600">Total Revenue</p>
                  <p className="text-2xl font-bold text-gray-900">
                    ${data.summary?.totalRevenue?.toLocaleString() || "125,000"}
                  </p>
                </div>
                <div className="p-3 bg-green-100 rounded-full">
                  <DollarSign className="w-6 h-6 text-green-600" />
                </div>
              </div>
              <div className="flex items-center mt-2">
                <TrendingUp className="w-4 h-4 text-green-500 mr-1" />
                <span className="text-sm text-green-600 font-medium">
                  +{data.summary?.growth || 12.5}%
                </span>
                <span className="text-sm text-gray-500 ml-1">vs last period</span>
              </div>
            </motion.div>

            <motion.div
              className="bg-white rounded-lg p-4 shadow-sm border border-gray-100"
              whileHover={{ scale: 1.02 }}
              transition={{ type: "spring", stiffness: 300 }}
            >
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600">Peak Performance</p>
                  <p className="text-lg font-bold text-gray-900">
                    {data.summary?.topPerformingPeriod || "Weekend evenings"}
                  </p>
                </div>
                <div className="p-3 bg-purple-100 rounded-full">
                  <Star className="w-6 h-6 text-purple-600" />
                </div>
              </div>
              <div className="flex items-center mt-2">
                <Target className="w-4 h-4 text-purple-500 mr-1" />
                <span className="text-sm text-purple-600 font-medium">
                  35% above average
                </span>
              </div>
            </motion.div>

            <motion.div
              className="bg-white rounded-lg p-4 shadow-sm border border-gray-100"
              whileHover={{ scale: 1.02 }}
              transition={{ type: "spring", stiffness: 300 }}
            >
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600">Trend</p>
                  <p className="text-lg font-bold text-gray-900 capitalize">
                    {data.summary?.trend || "Increasing"}
                  </p>
                </div>
                <div className="p-3 bg-blue-100 rounded-full">
                  <TrendingUp className="w-6 h-6 text-blue-600" />
                </div>
              </div>
              <div className="flex items-center mt-2">
                <Activity className="w-4 h-4 text-blue-500 mr-1" />
                <span className="text-sm text-blue-600 font-medium">
                  Consistent growth
                </span>
              </div>
            </motion.div>
          </div>

          {/* Data Breakdown */}
          <Tabs value={selectedView} onValueChange={(v) => setSelectedView(v as any)}>
            <TabsList className="grid w-full grid-cols-2">
              <TabsTrigger value="chart">Visual Chart</TabsTrigger>
              <TabsTrigger value="breakdown">Data Breakdown</TabsTrigger>
            </TabsList>

            <TabsContent value="chart" className="mt-4">
              <div className="bg-white rounded-lg p-4 border border-gray-100">
                <div className="h-64 flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-50 rounded-lg">
                  <div className="text-center">
                    <BarChart3 className="w-16 h-16 text-blue-400 mx-auto mb-2" />
                    <p className="text-gray-600">Interactive chart would render here</p>
                    <p className="text-sm text-gray-500">Revenue trends over {timeframe}</p>
                  </div>
                </div>
              </div>
            </TabsContent>

            <TabsContent value="breakdown" className="mt-4">
              <div className="space-y-3">
                {data.breakdown?.map((item: any, index: number) => (
                  <motion.div
                    key={index}
                    className="bg-white rounded-lg p-4 border border-gray-100 flex items-center justify-between"
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ delay: index * 0.1 }}
                  >
                    <div className="flex items-center gap-3">
                      <div className="w-3 h-3 rounded-full bg-blue-500"></div>
                      <span className="font-medium text-gray-900">{item.name}</span>
                    </div>
                    <div className="text-right">
                      <p className="font-bold text-gray-900">
                        ${item.revenue?.toLocaleString()}
                      </p>
                      <p className={`text-sm ${item.growth > 0 ? 'text-green-600' : 'text-red-600'}`}>
                        {item.growth > 0 ? '+' : ''}{item.growth}%
                      </p>
                    </div>
                  </motion.div>
                ))}
              </div>
            </TabsContent>
          </Tabs>

          {/* Key Insights */}
          {insights && insights.length > 0 && (
            <div className="mt-6">
              <h4 className="font-semibold text-gray-900 mb-3 flex items-center gap-2">
                <Lightbulb className="w-5 h-5 text-yellow-500" />
                Key Insights
              </h4>
              <div className="space-y-2">
                {insights.map((insight, index) => (
                  <motion.div
                    key={index}
                    className="flex items-start gap-3 p-3 bg-yellow-50 rounded-lg border border-yellow-200"
                    initial={{ opacity: 0, y: 10 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: index * 0.1 }}
                  >
                    <CheckCircle className="w-5 h-5 text-yellow-600 mt-0.5 flex-shrink-0" />
                    <p className="text-sm text-gray-700">{insight}</p>
                  </motion.div>
                ))}
              </div>
            </div>
          )}

          {/* Action Buttons */}
          <div className="flex gap-3 mt-6">
            <Button className="flex items-center gap-2">
              <Download className="w-4 h-4" />
              Export Report
            </Button>
            <Button variant="outline" className="flex items-center gap-2">
              <Eye className="w-4 h-4" />
              Deep Dive Analysis
            </Button>
          </div>
        </CardContent>
      </Card>
    </motion.div>
  );
};

// Forecast Visualization Component
export const ForecastVisualization: React.FC<{
  metric: string;
  forecast: any;
  confidence: number;
}> = ({ metric, forecast, confidence }) => {
  const [selectedScenario, setSelectedScenario] = useState<"optimistic" | "realistic" | "pessimistic">("realistic");

  return (
    <motion.div
      initial={{ opacity: 0, scale: 0.95 }}
      animate={{ opacity: 1, scale: 1 }}
      transition={{ duration: 0.5 }}
      className="w-full max-w-4xl"
    >
      <Card className="overflow-hidden border-0 shadow-xl bg-gradient-to-br from-purple-50 to-pink-100">
        <CardHeader className="bg-gradient-to-r from-purple-600 to-pink-600 text-white">
          <div className="flex justify-between items-center">
            <div>
              <CardTitle className="text-xl font-bold flex items-center gap-2">
                <TrendingUp className="w-6 h-6" />
                {metric.charAt(0).toUpperCase() + metric.slice(1)} Forecast
              </CardTitle>
              <p className="text-purple-100 mt-1">AI-powered predictive analysis</p>
            </div>
            <div className="text-right">
              <Badge variant="secondary" className="bg-white/20 text-white border-0 mb-1">
                <Zap className="w-4 h-4 mr-1" />
                {confidence}% Confidence
              </Badge>
              <Progress value={confidence} className="w-24 h-2" />
            </div>
          </div>
        </CardHeader>

        <CardContent className="p-6">
          {/* Scenario Selector */}
          <div className="mb-6">
            <h4 className="font-semibold text-gray-900 mb-3">Forecast Scenarios</h4>
            <div className="flex gap-2">
              {["optimistic", "realistic", "pessimistic"].map((scenario) => (
                <Button
                  key={scenario}
                  variant={selectedScenario === scenario ? "default" : "outline"}
                  onClick={() => setSelectedScenario(scenario as any)}
                  className="capitalize"
                >
                  {scenario}
                </Button>
              ))}
            </div>
          </div>

          {/* Forecast Chart Placeholder */}
          <div className="bg-white rounded-lg p-6 border border-gray-100 mb-6">
            <div className="h-64 flex items-center justify-center bg-gradient-to-br from-purple-50 to-pink-50 rounded-lg">
              <div className="text-center">
                <PieChart className="w-16 h-16 text-purple-400 mx-auto mb-2" />
                <p className="text-gray-600">Forecast chart for {selectedScenario} scenario</p>
                <p className="text-sm text-gray-500">
                  {forecast?.realistic?.length || 7} day prediction
                </p>
              </div>
            </div>
          </div>

          {/* Key Drivers */}
          <div className="mb-6">
            <h4 className="font-semibold text-gray-900 mb-3 flex items-center gap-2">
              <Target className="w-5 h-5 text-purple-500" />
              Key Influencing Factors
            </h4>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
              {forecast?.keyDrivers?.map((driver: any, index: number) => (
                <motion.div
                  key={index}
                  className="bg-white rounded-lg p-4 border border-gray-100"
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: index * 0.1 }}
                >
                  <div className="flex items-center justify-between">
                    <span className="font-medium text-gray-900">{driver.name}</span>
                    <Badge variant="outline">{driver.impact}% impact</Badge>
                  </div>
                  <Progress value={driver.impact} className="mt-2" />
                </motion.div>
              ))}
            </div>
          </div>

          {/* Recommendations */}
          <div className="bg-blue-50 rounded-lg p-4 border border-blue-200">
            <h4 className="font-semibold text-blue-900 mb-2 flex items-center gap-2">
              <Lightbulb className="w-5 h-5" />
              Recommendations
            </h4>
            <ul className="space-y-1">
              {forecast?.recommendations?.map((rec: string, index: number) => (
                <li key={index} className="text-sm text-blue-800 flex items-start gap-2">
                  <CheckCircle className="w-4 h-4 text-blue-600 mt-0.5 flex-shrink-0" />
                  {rec}
                </li>
              ))}
            </ul>
          </div>

          {/* Action Buttons */}
          <div className="flex gap-3 mt-6">
            <Button className="flex items-center gap-2">
              <Download className="w-4 h-4" />
              Export Forecast
            </Button>
            <Button variant="outline" className="flex items-center gap-2">
              <Calendar className="w-4 h-4" />
              Schedule Updates
            </Button>
          </div>
        </CardContent>
      </Card>
    </motion.div>
  );
};

// Customer Insights Component
export const CustomerInsightsCard: React.FC<{
  data: any;
  analysisType: string;
}> = ({ data, analysisType }) => {
  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
      className="w-full max-w-4xl"
    >
      <Card className="overflow-hidden border-0 shadow-xl bg-gradient-to-br from-green-50 to-emerald-100">
        <CardHeader className="bg-gradient-to-r from-green-600 to-emerald-600 text-white">
          <CardTitle className="text-xl font-bold flex items-center gap-2">
            <Users className="w-6 h-6" />
            Customer {analysisType.charAt(0).toUpperCase() + analysisType.slice(1)} Analysis
          </CardTitle>
        </CardHeader>

        <CardContent className="p-6">
          {analysisType === "segments" && (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {Object.entries(data || {}).map(([segment, info]: [string, any]) => (
                <motion.div
                  key={segment}
                  className="bg-white rounded-lg p-4 border border-gray-100"
                  whileHover={{ scale: 1.02 }}
                  transition={{ type: "spring", stiffness: 300 }}
                >
                  <h4 className="font-semibold text-gray-900 capitalize mb-2">
                    {segment.replace(/([A-Z])/g, ' $1').trim()}
                  </h4>
                  <div className="space-y-2">
                    <div className="flex justify-between">
                      <span className="text-sm text-gray-600">Count:</span>
                      <span className="font-medium">{info.count}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm text-gray-600">Percentage:</span>
                      <span className="font-medium">{info.percentage}%</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm text-gray-600">Avg Spend:</span>
                      <span className="font-medium">${info.avgSpend}</span>
                    </div>
                  </div>
                  <Progress value={info.percentage} className="mt-3" />
                </motion.div>
              ))}
            </div>
          )}

          <div className="flex gap-3 mt-6">
            <Button className="flex items-center gap-2">
              <Download className="w-4 h-4" />
              Export Analysis
            </Button>
            <Button variant="outline" className="flex items-center gap-2">
              <Eye className="w-4 h-4" />
              Detailed View
            </Button>
          </div>
        </CardContent>
      </Card>
    </motion.div>
  );
};
