extend type LocationAnalysis {
  """
  ✨ Implicit foreign key field based on `LocationAnalysis`.`user`. It must match the value of `User`.`id`. See `@ref` for how to customize it.
  """
  userId: String! @fdc_generated(from: "LocationAnalysis.user", purpose: IMPLICIT_REF_FIELD)
}
extend type MarketReport {
  """
  ✨ Implicit foreign key field based on `MarketReport`.`user`. It must match the value of `User`.`id`. See `@ref` for how to customize it.
  """
  userId: String! @fdc_generated(from: "MarketReport.user", purpose: IMPLICIT_REF_FIELD)
}
extend type RestaurantAnalytics {
  """
  ✨ Implicit foreign key field based on `RestaurantAnalytics`.`restaurant`. It must match the value of `Restaurant`.`id`. See `@ref` for how to customize it.
  """
  restaurantId: UUID! @fdc_generated(from: "RestaurantAnalytics.restaurant", purpose: IMPLICIT_REF_FIELD)
}
extend type RestaurantReview {
  """
  ✨ Implicit foreign key field based on `RestaurantReview`.`restaurant`. It must match the value of `Restaurant`.`id`. See `@ref` for how to customize it.
  """
  restaurantId: UUID! @fdc_generated(from: "RestaurantReview.restaurant", purpose: IMPLICIT_REF_FIELD)
  """
  ✨ Implicit foreign key field based on `RestaurantReview`.`user`. It must match the value of `User`.`id`. See `@ref` for how to customize it.
  """
  userId: String! @fdc_generated(from: "RestaurantReview.user", purpose: IMPLICIT_REF_FIELD)
}
extend type UserSession {
  """
  ✨ Implicit foreign key field based on `UserSession`.`user`. It must match the value of `User`.`id`. See `@ref` for how to customize it.
  """
  userId: String! @fdc_generated(from: "UserSession.user", purpose: IMPLICIT_REF_FIELD)
}
