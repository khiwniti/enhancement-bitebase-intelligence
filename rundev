#!/bin/bash

# BiteBase Intelligence Development Server Launcher
# This script starts both backend and frontend services

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[RUNDEV]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check if port is in use
check_port() {
    local port=$1
    if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null 2>&1; then
        return 0
    else
        return 1
    fi
}

# Function to kill processes on specific ports
kill_port() {
    local port=$1
    local pids=$(lsof -ti :$port)
    if [ ! -z "$pids" ]; then
        print_warning "Killing existing processes on port $port"
        echo $pids | xargs kill -9 2>/dev/null || true
        sleep 2
    fi
}

# Function to cleanup on exit
cleanup() {
    print_status "Shutting down services..."
    if [ ! -z "$BACKEND_PID" ]; then
        kill $BACKEND_PID 2>/dev/null || true
    fi
    if [ ! -z "$FRONTEND_PID" ]; then
        kill $FRONTEND_PID 2>/dev/null || true
    fi
    # Kill any remaining processes on our ports
    kill_port 8000
    kill_port 3000
    print_success "Services stopped"
    exit 0
}

# Set up signal handlers
trap cleanup SIGINT SIGTERM

print_status "Starting BiteBase Intelligence Development Environment"
echo ""

# Check if ports are available and clean them if needed
if check_port 8000; then
    print_warning "Port 8000 is already in use"
    kill_port 8000
fi

if check_port 3000; then
    print_warning "Port 3000 is already in use"
    kill_port 3000
fi

# Start backend
print_status "Starting backend server..."
cd backend
if [ ! -d ".venv" ]; then
    print_error "Backend virtual environment not found. Please run 'make install-backend' first."
    exit 1
fi

# Start backend in background
./run.sh > ../backend.log 2>&1 &
BACKEND_PID=$!
cd ..

# Wait a moment for backend to start
sleep 10

# Check if backend started successfully
if ! check_port 8000; then
    print_error "Backend failed to start on port 8000"
    cat backend.log
    exit 1
fi

print_success "Backend started on http://localhost:8000"

# Start frontend
print_status "Starting frontend server..."
cd frontend

# Check if dependencies are installed
if [ ! -f "yarn.lock" ]; then
    print_error "Frontend dependencies not found. Please run 'make install-frontend' first."
    exit 1
fi

# Start frontend in background
./run.sh > ../frontend.log 2>&1 &
FRONTEND_PID=$!
cd ..

# Wait for frontend to start
print_status "Waiting for frontend to start..."
sleep 10

# Check if frontend started successfully
if ! check_port 3000; then
    print_error "Frontend failed to start on port 3000"
    cat frontend.log
    exit 1
fi

print_success "Frontend started on http://localhost:3000"
echo ""
print_success "ðŸš€ BiteBase Intelligence is running!"
echo ""
print_status "Services:"
echo "  â€¢ Backend API: http://localhost:8000"
echo "  â€¢ Frontend UI: http://localhost:3000"
echo "  â€¢ API Docs: http://localhost:8000/docs"
echo ""
print_status "Logs:"
echo "  â€¢ Backend: tail -f backend.log"
echo "  â€¢ Frontend: tail -f frontend.log"
echo ""
print_warning "Press Ctrl+C to stop all services"

# Keep script running and monitor processes
while true; do
    if ! kill -0 $BACKEND_PID 2>/dev/null; then
        print_error "Backend process died unexpectedly"
        cat backend.log | tail -20
        break
    fi

    if ! kill -0 $FRONTEND_PID 2>/dev/null; then
        print_error "Frontend process died unexpectedly"
        cat frontend.log | tail -20
        break
    fi

    sleep 5
done

cleanup
